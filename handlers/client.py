from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.dispatcher.filters import Text
from keyboards.client_kb import bm_f, button_1, bl_f, bt_f, bn_f
import sqlite3
from email_validator import validate_email


base_storis = sqlite3.connect('base_storis.db')
cur_storis = base_storis.cursor()


base = sqlite3.connect('base.db')
cur = base.cursor()
"""   –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø   """

async def welcome(message: types.Message):
    try:
        cur.execute('INSERT INTO data VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)', (message.from_user.id, 'Null', 'Null', 'Null', 'Null', 1, 'Null', 'Null', 0))
        base.commit()
        await message.answer ('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', reply_markup= button_1)
    except sqlite3.IntegrityError:
        await message.answer('üîÜ–ú–µ–Ω—é', reply_markup=bm_f)

class user_reg(StatesGroup):
    name = State()
    email = State()
    phone = State()


async def welcome_conf(callback: types.CallbackQuery):
    await callback.message.answer ('üë§ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
    await user_reg.next()


async def get_age(message: types.Message, state: FSMContext):
    await state.update_data(name= message.text)
    await message.answer('üì™ –£–∫–∞–∂–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É\n\n<i>–ü—Ä–∏–º–µ—Ä: <code>user@mail.ru</code></i>', parse_mode= 'html')
    await user_reg.next()


async def get_email(message: types.Message, state: FSMContext):
    await state.update_data(email= message.text)
    try:
        validate_email(message.text, check_deliverability= True)
        await message.answer('‚òéÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n<i>–ü—Ä–∏–º–µ—Ä: <code>+79008505050</code></i>', parse_mode= 'html')
        await user_reg.next()
    except:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä: <code>user@mail.ru</code></i>', parse_mode= 'html')



async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone= message.text)
    while Text(startswith= '+7') and len(message.text) == 12:
        data = await state.get_data()
        cur.execute('UPDATE data SET name ==?, email ==?, phone ==?, bal ==?, user_name ==? WHERE id ==?', (data['name'], data['email'], data['phone'], '0', message.from_user.username, message.from_user.id))
        base.commit()
        base_storis.execute(f"CREATE TABLE IF NOT EXISTS {'id_' + str(message.from_user.id)} (id PRIMARY KEY, size)")
        base_storis.commit()
        await state.finish()
        await message.answer('üîÜ–ú–µ–Ω—é', reply_markup=bm_f)
        break
    else:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä: <code>+79008505050</code></i>', parse_mode= 'html')

"""  –†–ê–ó–î–ï–õ–´   """

async def office_lk(message: types.Message):
    name, promo, email, phone = cur.execute('SELECT name, promo, email, phone FROM data WHERE id ==?', (message.from_user.id,)).fetchone()
    await message.answer(f'<b>üîé –í–∞—à id:</b> <i>{message.from_user.id}</i>\n\n<b>üë§ –ò–º—è:</b> <i>{name}</i> \n<b>üì™ –≠–ª.–ü–æ—á—Ç–∞:</b> <i>{email}</i>\n<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{phone}</i>\n\n<b>üéÅ–ë–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏:</b> {promo} —Ä—É–±.', reply_markup= bl_f, parse_mode='html')

async def office_tov(message: types.Message):
    await message.answer('üõç–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=bt_f)

async def office_tov_cb(callback: types.CallbackQuery):
    await callback.message.delete()

"""   –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
async def active_order(callback: types.CallbackQuery):
    i = cur.execute('SELECT * FROM order_basket').fetchall()
    for m in i:
        if m[0] == callback.from_user.id:
            if m[4] == '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É':
                await callback.bot.send_photo(m[0], m[11], f"<b>1. id –∑–∞–∫–∞–∑–∞:</b> <code>{m[2]}</code>\n<b>2. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {m[9]}\n<b>3. –†–∞–∑–º–µ—Ä:</b> {m[3]}\n<b>4. –¶–µ–Ω–∞:</b> {m[10]} —Ä—É–±.\n<b>5. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {m[8]}", parse_mode= 'html', reply_markup= InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É', callback_data='None')))     
        elif m[4] != '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É':
            await callback.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤üòî', show_alert= True)

"""   –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫   """
async def history_user_f(callback: types.CallbackQuery):
    order = cur.execute('SELECT * FROM order_basket').fetchall()
    inl = InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–ó–∞–≤–µ—Ä—à–µ–Ω–æ', callback_data= 'None'))
    how = 0
    for i in order:
        if i[0] == callback.from_user.id and i[4] == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
            await callback.message.answer_photo(i[11], f"<b>1. id –∑–∞–∫–∞–∑–∞:</b> <code>{i[2]}</code>\n<b>2. id —Ç–æ–≤–∞—Ä–∞:</b> <code>{i[1]}</code>\n<b>3. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {i[9]}\n<b>4. –†–∞–∑–º–µ—Ä:</b> {i[3]}\n<b>5. –¶–µ–Ω–∞:</b> <code>{i[10]}</code>\n<b>6. –û–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–∞–º–∏:</b> <code>{i[12]}</code>\n<b>7. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> <code>{int(i[10]) - int(i[12])}</code>", parse_mode= 'html', reply_markup= inl)
            print('ok')
            how += 1
    if how == 0:
        await callback.answer('üîé–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞', show_alert= True)

"""   –¢–û–í–ê–†–´ –£ –Æ–ó–ï–†–ê –ò –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£   """
"""–ú—É–∂—Å–∫–∏–µ"""
async def office_mu(callback: types.CallbackQuery):
    try:
        number = 1
        i = cur.execute('SELECT rowid, * FROM men_kross WHERE rowid ==?', (number,)).fetchone()    
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.answer_photo(i[5], f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html', reply_markup= bkar_f)
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (number, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞', show_alert= True)

async def next_ti(callback: types.CallbackQuery):
    try:
        rowid_s = cur.execute('SELECT products_id FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
        i = cur.execute('SELECT rowid, * FROM men_kross WHERE rowid ==?', (int(rowid_s[0]) + 1,)).fetchone()
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.edit_media(InputMediaPhoto(i[5], caption= f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html'), reply_markup= bkar_f)
        rowid_new = 1 + int(rowid_s[0])
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (rowid_new, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', show_alert= True)

async def back_ti(callback: types.CallbackQuery):
    try:
        rowid_s = cur.execute('SELECT products_id FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
        i = cur.execute('SELECT rowid, * FROM men_kross WHERE rowid ==?', (int(rowid_s[0]) - 1,)).fetchone()
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.edit_media(InputMediaPhoto(i[5], caption = f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html'), reply_markup= bkar_f)
        rowid_new = int(rowid_s[0]) - 1
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (rowid_new, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–õ–∏—Å—Ç–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä', show_alert= True)

"""–ñ–µ–Ω—Å–∫–∏–µ"""
async def office_zh(callback: types.CallbackQuery):
    try:
        number = 1
        i = cur.execute('SELECT rowid, * FROM girl_kross WHERE rowid ==?', (number,)).fetchone()    
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next_zh')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back_zh')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size_zh {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.answer_photo(i[5],  f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html', reply_markup= bkar_f)
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (number, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞', show_alert= True)

async def next_tim(callback: types.CallbackQuery):
    try:
        rowid_s = cur.execute('SELECT products_id FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
        i = cur.execute('SELECT rowid, * FROM girl_kross WHERE rowid ==?', (int(rowid_s[0]) + 1,)).fetchone()
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next_zh')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back_zh')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size_zh {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.edit_media(InputMediaPhoto(i[5], caption= f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html'), reply_markup= bkar_f)
        rowid_new = 1 + int(rowid_s[0])
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (rowid_new, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', show_alert= True)

async def back_tim(callback: types.CallbackQuery):
    try:
        rowid_s = cur.execute('SELECT products_id FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
        i = cur.execute('SELECT rowid, * FROM girl_kross WHERE rowid ==?', (int(rowid_s[0]) - 1,)).fetchone()
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next_zh')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back_zh')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size_zh {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.edit_media(InputMediaPhoto(i[5], caption= f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html'), reply_markup= bkar_f)
        rowid_new = int(rowid_s[0]) - 1
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (rowid_new, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–õ–∏—Å—Ç–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä', show_alert= True)

"""–î–µ—Ç—Å–∫–∏–µ"""
async def office_det(callback: types.CallbackQuery):
    try:
        number = 1
        i = cur.execute('SELECT rowid, * FROM baby_kross WHERE rowid ==?', (number,)).fetchone()    
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next_b')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back_b')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size_b {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.answer_photo(i[5], f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html', reply_markup= bkar_f)
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (number, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞', show_alert= True)

async def next_tib(callback: types.CallbackQuery):
    try:
        rowid_s = cur.execute('SELECT products_id FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
        i = cur.execute('SELECT rowid, * FROM baby_kross WHERE rowid ==?', (int(rowid_s[0]) + 1,)).fetchone()
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next_b')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back_b')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size_b {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.edit_media(InputMediaPhoto(i[5], caption = f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html'), reply_markup= bkar_f)
        rowid_new = 1 + int(rowid_s[0])
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (rowid_new, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', show_alert= True)

async def back_tib(callback: types.CallbackQuery):
    try:
        rowid_s = cur.execute('SELECT products_id FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
        i = cur.execute('SELECT rowid, * FROM baby_kross WHERE rowid ==?', (int(rowid_s[0]) - 1 ,)).fetchone()
        row = InlineKeyboardButton('–°–ª–µ–¥—É—â–∏–π', callback_data='next_b')
        row_back = InlineKeyboardButton('–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='back_b')
        bkar = InlineKeyboardButton('üóë–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'size_b {i[6]}')
        price_back = InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='office_tov_inline')
        bkar_f = InlineKeyboardMarkup()
        bkar_f.add(row_back, row).add(bkar).add(price_back)
        await callback.message.edit_media(InputMediaPhoto(i[5], caption= f"<b>{i[1]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[2]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[3]} —Ä—É–±.</b>", parse_mode='html'), reply_markup= bkar_f)
        rowid_new = int(rowid_s[0]) - 1
        cur.execute('UPDATE data SET products_id ==? WHERE id ==?', (rowid_new, callback.from_user.id))
        base.commit()
    except TypeError:
        await callback.answer('–õ–∏—Å—Ç–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä', show_alert= True)

"""   –†–ê–ó–ú–ï–†–´, –ö–ù–û–ü–û–ö   """
"""–ú–£–ñ–°–ö–ò–ï"""
async def size_inline(callback: types.CallbackQuery):
    i = cur.execute('SELECT * FROM men_kross WHERE id ==?', (int(callback.data.replace('size ', '')),)).fetchall()
    y = i[0][3].split(',')
    button_generator = [InlineKeyboardButton(f'{m}', callback_data= f'size_save_h {m, i[0][5]}') for m in y]
    size_in = InlineKeyboardButton('üåÄ–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä', callback_data='none')
    size_in_f = InlineKeyboardMarkup()
    size_in_f.add(size_in).add(*button_generator)
    await callback.message.edit_reply_markup(reply_markup= size_in_f)
   
"""–ñ–ï–ù–°–ö–ò–ï"""    
async def size_inline_zh(callback: types.CallbackQuery):
    i = cur.execute('SELECT * FROM girl_kross WHERE id ==?', (int(callback.data.replace('size_zh ', '')),)).fetchall()
    y = i[0][3].split(',')
    button_generator = [InlineKeyboardButton(f'{m}', callback_data= f'size_save_zh {m, i[0][5]}') for m in y]
    size_in = InlineKeyboardButton('üåÄ–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä', callback_data='none')
    size_in_f = InlineKeyboardMarkup()
    size_in_f.add(size_in).add(*button_generator)
    await callback.message.edit_reply_markup(reply_markup= size_in_f)

"""–î–ï–¢–°–ö–ò–ï"""
async def size_inline_b(callback: types.CallbackQuery):
    i = cur.execute('SELECT * FROM baby_kross WHERE id ==?', (int(callback.data.replace('size_b ', '')),)).fetchall()
    y = i[0][3].split(',')
    button_generator = [InlineKeyboardButton(f'{m}', callback_data= f'size_save_b {m, i[0][5]}') for m in y]
    size_in = InlineKeyboardButton('üåÄ–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä', callback_data='none')
    size_in_f = InlineKeyboardMarkup()
    size_in_f.add(size_in).add(*button_generator)
    await callback.message.edit_reply_markup(reply_markup= size_in_f)

"""–°–û–•–†–ê–ù–ï–ù–ò–ï –¢–û–í–ê–†–ê –í –ò–°–¢–û–†–ò–Æ"""
async def save_korzina(callback: types.CallbackQuery):
    z = callback.data.replace('size_save_h ', '').replace('(', '').replace(')', '').replace("'", '').replace(' ', '').split(',')
    bkor = InlineKeyboardButton('‚úÖ–î–æ–±–∞–≤–∏—Ç—å', callback_data=f'save_m {z}')
    bkor_b = InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='save_kor_back_i')
    bkor_f = InlineKeyboardMarkup(row_width=1)
    bkor_f.add(bkor, bkor_b)
    await callback.message.edit_reply_markup(reply_markup= bkor_f)

async def save_kor_f(callback: types.CallbackQuery):
    try:
        z = callback.data.replace('save_m ', '').replace('[', '').replace(']', '').replace("'", '').replace(' ', '').split(',')
        cur_storis.execute(f"INSERT INTO {'id_' + str(callback.from_user.id)} VALUES (?, ?)", (z[1], z[0]))
        base_storis.commit()
        save_ok = InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='none'))
        await callback.message.edit_reply_markup(reply_markup= save_ok)
        await callback.answer('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ö–æ—Ä–∑–∏–Ω–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', show_alert= True)
        await callback.message.answer('üõç–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=bt_f)
    except:
        await callback.answer('–¢–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert= True)

async def save_korzina_zh(callback: types.CallbackQuery):
    z = callback.data.replace('size_save_zh ', '').replace('(', '').replace(')', '').replace("'", '').replace(' ', '').split(',')
    bkor = InlineKeyboardButton('‚úÖ–î–æ–±–∞–≤–∏—Ç—å', callback_data=f'save_zh {z}')
    bkor_b = InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='save_kor_back_i')
    bkor_f = InlineKeyboardMarkup(row_width=1)
    bkor_f.add(bkor, bkor_b)
    await callback.message.edit_reply_markup(reply_markup= bkor_f)

async def save_kor_f_zh(callback: types.CallbackQuery):
    try:    
        z = callback.data.replace('save_zh ', '').replace('[', '').replace(']', '').replace("'", '').replace(' ', '').split(',')
        cur_storis.execute(f"INSERT INTO {'id_' + str(callback.from_user.id)} VALUES (?, ?)", (z[1], z[0]))
        base_storis.commit()
        save_ok = InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='none'))
        await callback.message.edit_reply_markup(reply_markup= save_ok)
        await callback.answer('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ö–æ—Ä–∑–∏–Ω–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', show_alert= True)
        await callback.message.answer('üõç–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=bt_f)
    except:
        await callback.answer('–¢–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert= True)

async def save_korzina_b(callback: types.CallbackQuery):
    z = callback.data.replace('size_save_b ', '').replace('(', '').replace(')', '').replace("'", '').replace(' ', '').split(',')
    bkor = InlineKeyboardButton('‚úÖ–î–æ–±–∞–≤–∏—Ç—å', callback_data=f'save_b {z}')
    bkor_b = InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='save_kor_back_i')
    bkor_f = InlineKeyboardMarkup(row_width=1)
    bkor_f.add(bkor, bkor_b)
    await callback.message.edit_reply_markup(reply_markup= bkor_f)

async def save_kor_f_b(callback: types.CallbackQuery):
    try:   
        z = callback.data.replace('save_b ', '').replace('[', '').replace(']', '').replace("'", '').replace(' ', '').split(',')
        cur_storis.execute(f"INSERT INTO {'id_' + str(callback.from_user.id)} VALUES (?, ?)", (z[1], z[0]))
        base_storis.commit()
        save_ok = InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='none'))
        await callback.message.edit_reply_markup(reply_markup= save_ok)
        await callback.answer('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ö–æ—Ä–∑–∏–Ω–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', show_alert= True)
        await callback.message.answer('üõç–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=bt_f)
    except:
        await callback.answer('–¢–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert= True)

async def save_kor_back(callback: types.CallbackQuery):
    await callback.message.delete()

"""   –ü–†–û–ú–û–ö–û–î   """
class promo_m(StatesGroup):
    promo_input = State()

async def promo_kod_f(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('üíé–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥')
    await promo_m.next()

async def promo_kod_save(message: types.Message, state: FSMContext):
    m = cur.execute('SELECT * FROM promo').fetchall()
    await state.update_data(promo_input = message.text)
    name, promo, email, phone = cur.execute('SELECT name, promo, email, phone FROM data WHERE id ==?', (message.from_user.id,)).fetchone()
    how = 0
    for i in m:
        if i[0] == message.text and i[2] == 'True':
            await message.answer(f"üéâ–í—ã –ø–æ–ª—É—á–∏–ª–∏ {i[1]} –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π")
            await message.answer(f'<b>üîé –í–∞—à id:</b> <i>{message.from_user.id}</i>\n\n<b>üë§ –ò–º—è:</b> <i>{name}</i> \n<b>üì™ –≠–ª.–ü–æ—á—Ç–∞:</b> <i>{email}</i>\n<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{phone}</i>\n\n<b>üéÅ–ë–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏:</b> {i[1]} —Ä—É–±.', reply_markup= bl_f, parse_mode='html')
            cur.execute('UPDATE promo SET state ==? WHERE discount_cod ==?', ('False', message.text))
            base.commit()
            cur.execute('UPDATE data SET promo ==? WHERE id ==?', (i[1], message.from_user.id))
            base.commit()
            await state.finish()
            how += 1

    if how == 0:
        await state.finish()
        await message.answer('‚ùóÔ∏è–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ–µ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏')
        await message.answer(f'<b>üîé –í–∞—à id:</b> <i>{message.from_user.id}</i>\n\n<b>üë§ –ò–º—è:</b> <i>{name}</i> \n<b>üì™ –≠–ª.–ü–æ—á—Ç–∞:</b> <i>{email}</i>\n<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{phone}</i>\n\n<b>üéÅ–ë–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏:</b> {promo} —Ä—É–±.', reply_markup= bl_f, parse_mode='html')

        
    

"""   –ö–û–†–ó–ò–ù–ê   """
async def favorites_tov_def(callback: types.CallbackQuery):
    list = cur_storis.execute(f"SELECT * FROM {'id_' + str(callback.from_user.id)}").fetchall()
    promo = cur.execute('SELECT promo FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
    for i in list:
        for m in cur.execute('SELECT * FROM men_kross').fetchall():
            if int(i[0]) == int(m[5]):
                inline = InlineKeyboardButton('‚ùå–£–±—Ä–∞—Ç—å —Å –∫–æ—Ä–∑–∏–Ω—ã', callback_data= f"delete_fav {m[5]}")
                inline_2 = InlineKeyboardButton('‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å', callback_data=f'order {i}')
                inline_f = InlineKeyboardMarkup(row_width=1)
                inline_f.add(inline, inline_2)
                await callback.message.answer_photo(m[4], f'<b>{m[0]}</b>\n<i>–¶–µ–Ω–∞:</i> <b>{m[2]} —Ä—É–±.</b>\n–ë–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏: <b>{promo[0]} —Ä—É–±.</b>\n<i>—Ä–∞–∑–º–µ—Ä:</i> <b>{i[1]}</b>\n\n–ö –æ–ø–ª–∞—Ç–µ: <b>{int(m[2]) - int(promo[0])} —Ä—É–±.</b>', parse_mode='html', reply_markup= inline_f)

        for w in cur.execute('SELECT * FROM girl_kross').fetchall():
            if int(i[0]) == int(w[5]):
                inline = InlineKeyboardButton('‚ùå–£–±—Ä–∞—Ç—å —Å –∫–æ—Ä–∑–∏–Ω—ã', callback_data= f"delete_fav {w[5]}")
                inline_2 = InlineKeyboardButton('‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å', callback_data=f'order {i}')
                inline_f = InlineKeyboardMarkup(row_width=1)
                inline_f.add(inline, inline_2)
                await callback.message.answer_photo(w[4], f'<b>{w[0]}</b>\n<i>–¶–µ–Ω–∞:</i> <b>{w[2]} —Ä—É–±.</b>\n–ë–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏: <b>{promo[0]} —Ä—É–±.</b>\n<i>—Ä–∞–∑–º–µ—Ä:</i> <b>{i[1]}</b>\n\n–ö –æ–ø–ª–∞—Ç–µ: <b>{int(w[2]) - int(promo[0])} —Ä—É–±.</b>', parse_mode='html', reply_markup= inline_f)

        for p in cur.execute('SELECT * FROM baby_kross').fetchall():
            if int(i[0]) == int(p[5]):
                inline = InlineKeyboardButton('‚ùå–£–±—Ä–∞—Ç—å —Å –∫–æ—Ä–∑–∏–Ω—ã', callback_data= f"delete_fav {p[5]}")
                inline_2 = InlineKeyboardButton('‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å', callback_data=f'order {i}')
                inline_f = InlineKeyboardMarkup(row_width=1)
                inline_f.add(inline, inline_2)
                await callback.message.answer_photo(p[4], f'<b>{p[0]}</b>\n<i>–¶–µ–Ω–∞:</i> <b>{p[2]} —Ä—É–±.</b>\n–ë–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏: <b>{promo[0]} —Ä—É–±.</b>\n<i>—Ä–∞–∑–º–µ—Ä:</i> <b>{i[1]}</b>\n\n–ö –æ–ø–ª–∞—Ç–µ: <b>{int(p[2]) - int(promo[0])} —Ä—É–±.</b>', parse_mode='html', reply_markup= inline_f)
    if list == []:
        await callback.answer('–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤', show_alert= True)

async def delete_full(callback: types.CallbackQuery):
    cur_storis.execute(f"DELETE FROM {'id_' + str(callback.from_user.id)} WHERE id ==?", (callback.data.replace('delete_fav ', ''),))
    base_storis.commit()
    await callback.message.delete()
    await callback.answer('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', show_alert= True)

async def order_f(callback: types.CallbackQuery):
    i = callback.data.replace('order ', '').replace('(', '').replace(')', '').replace("'", '').split(',')
    check = cur.execute('SELECT adress FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
    if check[0] == 'Null':
        await callback.message.answer('<b>‚ùóÔ∏è–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</b>', parse_mode= 'html')
    elif check[0] != 'Null':
        s = cur.execute('SELECT * FROM products_id').fetchall()
        s_new = int(s[0][0]) + 1
        cur.execute('INSERT INTO order_basket VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (callback.from_user.id, i[0], s_new, i[1], '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 'Null', 'Null', 'Null', 'Null', 'Null', 'Null', 'Null', 'Null'))
        base.commit()
        cur_storis.execute(f"DELETE FROM {'id_' + str(callback.from_user.id)} WHERE id ==?", (i[0],))
        base_storis.commit()
        promo = cur.execute('SELECT promo FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
        inline_1 = InlineKeyboardButton('‚öúÔ∏è–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä‚öúÔ∏è', callback_data='none')
        inline_2 = InlineKeyboardButton('‚úÖ–û–ø–ª–∞—Ç–∏–ª(–∞)', callback_data=f"status {s_new}")
        inline = InlineKeyboardMarkup(row_width=1).add(inline_1, inline_2)
        cur.execute('UPDATE products_id SET id ==?', (s_new,))
        base.commit()
        card = cur.execute('SELECT * FROM card').fetchone()
        await callback.message.edit_reply_markup(reply_markup=inline)
        for w in cur.execute('SELECT * FROM men_kross WHERE id ==?', (int(i[0]),)).fetchall():
            if w[5] == int(i[0]):
                await callback.message.answer(f"<b>1.</b> –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{int(w[2]) - int(promo[0])} —Ä—É–±.</b> –Ω–∞ –∫–∞—Ä—Ç—É <code>{card[0]}</code> \n<b>2.</b> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–û–ø–ª–∞—Ç–∏–ª\"</b>, –∏ –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞\n\n<i>‚ùóÔ∏è–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ -> –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</i>\n‚ùóÔ∏è<i>–¢–∞–ø–Ω–µ—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>", parse_mode= 'html')
    
        for q in cur.execute('SELECT * FROM girl_kross WHERE id ==?', (int(i[0]),)).fetchall():
            if q[5] == int(i[0]):
                await callback.message.answer(f"<b>1.</b> –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{int(q[2]) - int(promo[0])} —Ä—É–±.</b> –Ω–∞ –∫–∞—Ä—Ç—É <code>{card[0]}</code> \n<b>2.</b> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–û–ø–ª–∞—Ç–∏–ª\"</b>, –∏ –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞\n\n<i>‚ùóÔ∏è–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ -> –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</i>\n‚ùóÔ∏è<i>–¢–∞–ø–Ω–µ—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>", parse_mode= 'html')


        for u in cur.execute('SELECT * FROM baby_kross WHERE id ==?', (int(i[0]),)).fetchall():
            if u[5] == int(i[0]):
                await callback.message.answer(f"<b>1.</b> –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{int(u[2]) - int(promo[0])} —Ä—É–±.</b> –Ω–∞ –∫–∞—Ä—Ç—É <code>{card[0]}</code> \n<b>2.</b> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>\"–û–ø–ª–∞—Ç–∏–ª\"</b>, –∏ –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞\n\n<i>‚ùóÔ∏è–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ -> –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</i>\n‚ùóÔ∏è<i>–¢–∞–ø–Ω–µ—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</i>", parse_mode= 'html')

async def admin_order(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('‚ôªÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞', callback_data='None')))
    await callback.answer('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', show_alert= True)
    user_calback = callback.data.replace('status ', '')
    order_base = cur.execute('SELECT * FROM order_basket WHERE id_order ==?', (int(user_calback),)).fetchone()
    user = cur.execute('SELECT * FROM data WHERE id ==?', (callback.from_user.id,)).fetchone()
    men_k = cur.execute('SELECT * FROM men_kross WHERE id ==?', (int(order_base[1]),)).fetchall()
    girl_k = cur.execute('SELECT * FROM girl_kross WHERE id ==?', (int(order_base[1]),)).fetchall()
    baby_k= cur.execute('SELECT * FROM baby_kross WHERE id ==?', (int(order_base[1]),)).fetchall()
    order_in_1 = InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f"pay_ok {user_calback}")
    order_in_2 = InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f"cancel {user_calback}")
    order_inline_f = InlineKeyboardMarkup(row_width=1)
    order_inline_f.add(order_in_1, order_in_2)
    for w in men_k:
        if w[5] == int(order_base[1]):    
            for m in cur.execute('SELECT * FROM admin').fetchone():
                await callback.bot.send_message(m,f"<b>1. user_id:</b> <code>{callback.from_user.id}</code>\n<b>2. user_name:</b> @{callback.from_user.username}\n<b>3. –ò–º—è:</b> {user[1]}\n<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{user[3]}</code>\n<b>5. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> <code>{user[2]}</code>\n<b>6. id –∑–∞–∫–∞–∑–∞:</b> <code>{user_calback}</code>\n<b>7. id —Ç–æ–≤–∞—Ä–∞: <code>{w[5]}</code> </b>\n<b>8. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {w[0]}\n<b>9. –†–∞–∑–º–µ—Ä:</b> <code>{order_base[3]}</code>\n<b>10. –¶–µ–Ω–∞:</b> <code>{w[2]}</code>\n<b>11. –ë–æ–Ω—É—Å—ã —é–∑–µ—Ä–∞:</b> {user[8]}\n<b>12. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> <code>{int(w[2]) - int(user[8])}</code>\n<b>13. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user[7]}", parse_mode= 'html', reply_markup= order_inline_f)
                cur.execute('UPDATE order_basket SET user_name ==?, user_phone ==?, user_email ==?, user_adress ==?, price_title ==?, price_price ==?, price_photo ==?, promo ==? WHERE id_order ==?', (callback.from_user.username, user[3], user[2], user[7],  w[0], w[2], w[4], user[8], int(user_calback)))
                base.commit()
    for p in girl_k:
        if p[5] == int(order_base[1]):
            for m in cur.execute('SELECT * FROM admin').fetchone():
                await callback.bot.send_message(m,f"<b>1. user_id:</b> <code>{callback.from_user.id}</code>\n<b>2. user_name:</b> @{callback.from_user.username}\n<b>3. –ò–º—è:</b> {user[1]}\n<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{user[3]}</code>\n<b>5. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> <code>{user[2]}</code>\n<b>6. id –∑–∞–∫–∞–∑–∞:</b> <code>{user_calback}</code>\n<b>7. id —Ç–æ–≤–∞—Ä–∞: <code>{p[5]}</code> </b>\n<b>8. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {p[0]}\n<b>9. –†–∞–∑–º–µ—Ä:</b> <code>{order_base[3]}</code>\n<b>10. –¶–µ–Ω–∞:</b> <code>{p[2]}</code>\n<b>11. –ë–æ–Ω—É—Å—ã —é–∑–µ—Ä–∞:</b> {user[8]}\n<b>12. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> <code>{int(p[2]) - int(user[8])}</code>\n<b>13. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user[7]}", parse_mode= 'html', reply_markup= order_inline_f)     
                cur.execute('UPDATE order_basket SET user_name ==?, user_phone ==?, user_email ==?, user_adress ==?, price_title ==?, price_price ==?, price_photo ==?, promo ==? WHERE id_order ==?', (callback.from_user.username, user[3], user[2], user[7],  p[0], p[2], p[4], user[8], int(user_calback)))
                base.commit()

    for u in baby_k:
        if u[5] == int(order_base[1]):
            for m in cur.execute('SELECT * FROM admin').fetchone():
                await callback.bot.send_message(m,f"<b>1. user_id:</b> <code>{callback.from_user.id}</code>\n<b>2. user_name:</b> @{callback.from_user.username}\n<b>3. –ò–º—è:</b> {user[1]}\n<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{user[3]}</code>\n<b>5. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> <code>{user[2]}</code>\n<b>6. id –∑–∞–∫–∞–∑–∞:</b> <code>{user_calback}</code>\n<b>7. id —Ç–æ–≤–∞—Ä–∞: <code>{u[5]}</code> </b>\n<b>8. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {u[0]}\n<b>9. –†–∞–∑–º–µ—Ä:</b> <code>{order_base[3]}</code>\n<b>10. –¶–µ–Ω–∞:</b> <code>{u[2]}</code>\n<b>11. –ë–æ–Ω—É—Å—ã —é–∑–µ—Ä–∞:</b> {user[8]}\n<b>12. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> <code>{int(u[2]) - int(user[8])}</code>\n<b>13. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user[7]}", parse_mode= 'html', reply_markup= order_inline_f)
                cur.execute('UPDATE order_basket SET user_name ==?, user_phone ==?, user_email ==?, user_adress ==?, price_title ==?, price_price ==?, price_photo ==?, promo ==? WHERE id_order ==?', (callback.from_user.username, user[3], user[2], user[7],  u[0], u[2], u[4], user[8], int(user_calback)))
                base.commit()

"""   –ê–î–ú–ò–ù –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï   """
async def conf_user(callback: types.CallbackQuery):
    await callback.answer('–Æ–∑–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤ –ø—É–Ω–∫—Ç–µ "–ó–∞–∫–∞–∑—ã"', show_alert= True)
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω', callback_data= 'None')))
    inline = InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', callback_data= 'None'))
    i = cur.execute('SELECT * FROM order_basket WHERE id_order ==?', (int(callback.data.replace('pay_ok ', '')),)).fetchone()
    cur.execute('UPDATE order_basket SET status ==? WHERE id_order ==?', ('–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É', int(callback.data.replace('pay_ok ', ''))))
    base.commit()
    cur.execute('UPDATE data SET promo ==? WHERE id ==?', (0, i[0]))
    base.commit()
    await callback.bot.send_message(i[0], f"<b>id –∑–∞–∫–∞–∑–∞:</b> <code>{i[2]}</code>\n<b>–û–ø–ª–∞—á–µ–Ω–æ</b>: <b>{int(i[10])-int(i[12])}</b> —Ä—É–±.\n<b>–°–ø–∏—Å–∞–Ω–æ {i[12]} –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±.</b>", reply_markup= inline, parse_mode= 'html')

async def cancel_user(callback: types.CallbackQuery):
    inline = InlineKeyboardMarkup().add(InlineKeyboardButton('‚ùå–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', callback_data= 'None'))
    i = cur.execute('SELECT * FROM order_basket WHERE id_order ==?', (int(callback.data.replace('cancel ', '')),)).fetchone()
    cur.execute('UPDATE order_basket SET status ==? WHERE id_order ==?', ('–û—Ç–º–µ–Ω–µ–Ω–æ', int(callback.data.replace('cancel ', ''))))
    base.commit()
    await callback.bot.send_message(i[0], f"<b>id –∑–∞–∫–∞–∑–∞:</b> <code>{i[2]}</code>\n\n‚ùóÔ∏è<i>–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–ª–∞—Ç—ã –∏ id –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞</i>", reply_markup= inline, parse_mode= 'html')

async def office_back(message: types.Message):
    await message.answer('üîÜ–ú–µ–Ω—é', reply_markup=bm_f)

async def office_nas(message: types.Message):
    name, email, phone, adress = cur.execute('SELECT name, email, phone, adress FROM data WHERE id ==?', (message.from_user.id,)).fetchone()
    await message.answer(f'<b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n<b>üë§ –ò–º—è:</b> <i>{name}</i> \n<b>üì™ –≠–ª.–ü–æ—á—Ç–∞:</b> <i>{email}</i>\n<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{phone}</i>\n<b>üè†–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <i>{adress}</i>', parse_mode='html', reply_markup=bn_f)

async def office_pom(message: types.Message):
    await message.answer('üë®üèª‚Äçüíª–ü–æ–º–æ—â—å')

async def office_okom(message: types.Message):
    await message.answer('üî∞–û –∫–æ–º–ø–∞–Ω–∏–∏')
    



"""–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —é–∑–µ—Ä–∞"""
class name_edit(StatesGroup):
    name_edit = State()
async def edit_name(callback: types.CallbackQuery):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úèÔ∏è')
    await name_edit.next()

async def edit_name1(message: types.Message, state: FSMContext):
    await state.update_data(name_edit= message.text)
    data = await state.get_data()
    cur.execute('UPDATE data SET name ==? WHERE id ==?', (data['name_edit'], message.from_user.id))
    base.commit()
    await state.finish()
    name, email, phone, adress = cur.execute('SELECT name, email, phone, adress FROM data WHERE id ==?', (message.from_user.id,)).fetchone()
    await message.answer(f'<b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n<b>üë§ –ò–º—è:</b> <i>{name}</i> \n<b>üì™ –≠–ª.–ü–æ—á—Ç–∞:</b> <i>{email}</i>\n<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{phone}</i>\n<b>üè†–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <i>{adress}</i>', parse_mode='html', reply_markup=bn_f)


class email_edit(StatesGroup):
    email_edit = State()

async def edit_email(callback: types.CallbackQuery):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úèÔ∏è')
    await email_edit.next()

async def edit_email1(message: types.Message, state: FSMContext):
    try:
        validate_email(message.text, check_deliverability= True)
        await state.update_data(email_edit= message.text)
        data = await state.get_data()
        cur.execute('UPDATE data SET email ==? WHERE id ==?', (data['email_edit'], message.from_user.id))
        base.commit()
        await state.finish()
        name, email, phone, adress = cur.execute('SELECT name, email, phone, adress FROM data WHERE id ==?', (message.from_user.id,)).fetchone()
        await message.answer(f'<b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n<b>üë§ –ò–º—è:</b> <i>{name}</i> \n<b>üì™ –≠–ª.–ü–æ—á—Ç–∞:</b> <i>{email}</i>\n<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{phone}</i>\n<b>üè†–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <i>{adress}</i>', parse_mode='html', reply_markup=bn_f)
    except:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä: <code>user@mail.ru</code></i>', parse_mode= 'html')

class phone_edit(StatesGroup):
    phone_edit = State()

async def edit_phone(callback: types.CallbackQuery):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úèÔ∏è')
    await phone_edit.next()

async def edit_phone1(message: types.Message, state: FSMContext):
    await state.update_data(phone_edit= message.text)
    while Text(startswith= '+7') and len(message.text) == 12:
        data = await state.get_data()
        cur.execute('UPDATE data SET phone ==? WHERE id ==?', (data['phone_edit'], message.from_user.id))
        base.commit()
        await state.finish()
        name, email, phone, adress = cur.execute('SELECT name, email, phone, adress FROM data WHERE id ==?', (message.from_user.id,)).fetchone()
        await message.answer(f'<b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n<b>üë§ –ò–º—è:</b> <i>{name}</i> \n<b>üì™ –≠–ª.–ü–æ—á—Ç–∞:</b> <i>{email}</i>\n<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{phone}</i>\n<b>üè†–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <i>{adress}</i>', parse_mode='html', reply_markup=bn_f)
        break
    else:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n<i>–ü—Ä–∏–º–µ—Ä: <code>+79008505050</code></i>', parse_mode= 'html')

class set_adress(StatesGroup):
    user_adress = State()

async def set_adress_us(callback: types.CallbackQuery):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚úèÔ∏è')
    await set_adress.next()

async def save_adress(message: types.Message, state: FSMContext):
    await state.update_data(user_adress = message.text)
    data = await state.get_data()
    cur.execute('UPDATE data SET adress ==? WHERE id ==?', (data['user_adress'], message.from_user.id))
    base.commit()
    await state.finish()
    name, email, phone, adress = cur.execute('SELECT name, email, phone, adress FROM data WHERE id ==?', (message.from_user.id,)).fetchone()
    await message.answer(f'<b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n<b>üë§ –ò–º—è:</b> <i>{name}</i> \n<b>üì™ –≠–ª.–ü–æ—á—Ç–∞:</b> <i>{email}</i>\n<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{phone}</i>\n<b>üè†–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> <i>{adress}</i>', parse_mode='html', reply_markup=bn_f)

async def inline_none(callback: types.CallbackQuery):
    await callback.answer('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')

"""   –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä—è—Ü–∏—è   """
class save_one_admin_class(StatesGroup):
    admin = State()
async def save_one_admin(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await save_one_admin_class.next()
async def save_one_admin_f(message: types.Message, state: FSMContext):
    await state.update_data(admin = message.text)
    data = await state.get_data()
    cur.execute('INSERT INTO admin VALUES (?)', (data['admin'],))
    base.commit()
    await state.finish()
    await message.answer('–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω')

class save_one_id_class(StatesGroup):
    price_id = State()
async def save_one_id(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞')
    await save_one_id_class.next()
async def save_one_id_f(message: types.Message, state: FSMContext):
    await state.update_data(price_id = message.text)
    data = await state.get_data()
    cur.execute('INSERT INTO products_id VALUES (?)', (data['price_id'],))
    base.commit()
    await state.finish()
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω id price')

class save_one_card_class(StatesGroup):
    card_id = State()
async def save_one_card(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
    await save_one_card_class.next()
async def save_one_card_f(message: types.Message, state: FSMContext):
    await state.update_data(card_id = message.text)
    data = await state.get_data()
    cur.execute('INSERT INTO card VALUES (?)', (data['card_id'],))
    base.commit()
    await state.finish()
    await message.answer('–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')

class save_one_card_update_class(StatesGroup):
    card_update_id = State()
async def save_one_card_update(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã')
    await save_one_card_update_class.next()
async def save_one_card_update_f(message: types.Message, state: FSMContext):
    await state.update_data(card_update_id = message.text)
    data = await state.get_data()
    cur.execute('UPDATE card SET card ==?', (data['card_update_id'],))
    base.commit()
    await state.finish()
    await message.answer('–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')

def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(welcome, commands=['start'])
    dp.register_callback_query_handler(welcome_conf, text= 'welcome')
    dp.register_message_handler(get_age, state= user_reg.name)
    dp.register_message_handler(get_email, state= user_reg.email)
    dp.register_message_handler(get_phone, state= user_reg.phone)    
    dp.register_message_handler(office_lk, lambda message: 'üß∞–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' in message.text)
    dp.register_message_handler(office_tov, lambda message: 'üõç–¢–æ–≤–∞—Ä—ã' in message.text)
    dp.register_callback_query_handler(office_tov_cb, text = ['office_tov_inline'])
    dp.register_callback_query_handler(active_order, text = ['active_order_inline'])
    dp.register_callback_query_handler(history_user_f, text = ['history_user'])
    dp.register_callback_query_handler(office_mu, text = ['price_men'])
    dp.register_callback_query_handler(next_ti, text = ['next'])
    dp.register_callback_query_handler(back_ti, text = ['back'])
    dp.register_callback_query_handler(office_zh, text = ['price_girl'])
    dp.register_callback_query_handler(next_tim, text = ['next_zh'])
    dp.register_callback_query_handler(back_tim, text = ['back_zh'])
    dp.register_callback_query_handler(office_det, text = ['price_baby'])
    dp.register_callback_query_handler(next_tib, text = ['next_b'])
    dp.register_callback_query_handler(back_tib, text = ['back_b'])
    dp.register_callback_query_handler(size_inline, Text(startswith= 'size '))
    dp.register_callback_query_handler(size_inline_zh, Text(startswith= 'size_zh '))
    dp.register_callback_query_handler(size_inline_b, Text(startswith= 'size_b '))
    dp.register_callback_query_handler(save_korzina, Text(startswith= 'size_save_h '))
    dp.register_callback_query_handler(save_kor_f, Text(startswith= 'save_m '))
    dp.register_callback_query_handler(save_korzina_zh, Text(startswith= 'size_save_zh '))
    dp.register_callback_query_handler(save_kor_f_zh, Text(startswith= 'save_zh '))
    dp.register_callback_query_handler(save_korzina_b, Text(startswith= 'size_save_b '))
    dp.register_callback_query_handler(save_kor_f_b, Text(startswith= 'save_b '))
    dp.register_callback_query_handler(save_kor_back, text = ['save_kor_back_i'])
    dp.register_callback_query_handler(promo_kod_f, text = ['promo_kod'])
    dp.register_message_handler(promo_kod_save, state = promo_m.promo_input)
    dp.register_callback_query_handler(favorites_tov_def, text = ['favorites_tov'])
    dp.register_callback_query_handler(delete_full, Text(startswith= 'delete_fav '))
    dp.register_callback_query_handler(order_f, Text(startswith= 'order '))
    dp.register_callback_query_handler(admin_order, Text(startswith= 'status '))
    dp.register_callback_query_handler(conf_user, Text(startswith= 'pay_ok '))
    dp.register_callback_query_handler(cancel_user, Text(startswith= 'cancel '))
    dp.register_message_handler(office_back, lambda message: '‚¨ÖÔ∏è–ù–∞–∑–∞–¥' in message.text)
    dp.register_message_handler(office_nas, lambda message: '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏' in message.text)
    dp.register_message_handler(office_pom, lambda message: 'üë®üèª‚Äçüíª–ü–æ–º–æ—â—å' in message.text)
    dp.register_message_handler(office_okom, lambda message: 'üî∞–û –∫–æ–º–ø–∞–Ω–∏–∏' in message.text)
    dp.register_callback_query_handler(edit_name, text = ['edit_name'])
    dp.register_message_handler(edit_name1, state= name_edit.name_edit)
    dp.register_callback_query_handler(edit_email, text = ['edit_email'])
    dp.register_message_handler(edit_email1, state= email_edit.email_edit)
    dp.register_callback_query_handler(edit_phone, text = ['edit_phone'])
    dp.register_message_handler(edit_phone1, state= phone_edit.phone_edit)
    dp.register_callback_query_handler(set_adress_us, text = ['set_adress'])
    dp.register_message_handler(save_adress, state = set_adress.user_adress)
    dp.register_callback_query_handler(inline_none, text = ['None'])

    dp.register_message_handler(save_one_admin, lambda message: 'fbf0a710-2dbe-460d-a927-286ab42d836c' in message.text)
    dp.register_message_handler(save_one_admin_f, state= save_one_admin_class.admin)

    dp.register_message_handler(save_one_id, lambda message: 'e746f432-6309-4c23-9114-295ab56b1730' in message.text)
    dp.register_message_handler(save_one_id_f, state= save_one_id_class.price_id) 

    dp.register_message_handler(save_one_card, lambda message: '3fc3ef3e-74d3-4afd-b7b0-734a06f27ea9' in message.text)
    dp.register_message_handler(save_one_card_f, state= save_one_card_class.card_id) 

    dp.register_message_handler(save_one_card_update, lambda message: '73b453d1-36cb-4958-8ca0-38a61237c225' in message.text)
    dp.register_message_handler(save_one_card_update_f, state= save_one_card_update_class.card_update_id) 