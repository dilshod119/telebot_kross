from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import  FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
import sqlite3
from keyboards.admin_kb import bm_f, bt_f, bp_f, bz_f, br_f, bpromo_f, bkey_f, bti_f

base = sqlite3.connect('base.db')
cur = base.cursor()

async def admin_panel(message: types.Message):
    global base, cur
    id = cur.execute('SELECT * FROM admin').fetchall()
    for i in id:
        for r in i:
            if r == str(message.from_user.id):
                await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=bm_f)
            elif r != str(message.from_user.id):
                await message.answer('‚ùå–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª')


"""   –†–ê–ó–î–ï–õ–´   """
async def office_t(message: types.Message):
    await message.answer('üì¶–¢–æ–≤–∞—Ä—ã', reply_markup=bt_f)

async def office_p(message: types.Message):   
    await message.answer('üë•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', reply_markup=bp_f)

async def office_z(message: types.Message):    
    await message.answer('üõç–ó–∞–∫–∞–∑—ã', reply_markup=bz_f)

async def new_order_f(callback: types.CallbackQuery):
    i = cur.execute('SELECT * FROM order_basket').fetchall()
    how = 0
    for n in i:
        if n[4] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã':
            order_in_1 = InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data= f"pay_ok_admin {n[2]}")
            order_in_2 = InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data= f"cancel_admin {n[2]}")
            order_inline_f = InlineKeyboardMarkup(row_width=1)
            order_inline_f.add(order_in_1, order_in_2)
            await callback.message.answer_photo(n[11],f"<b>1. user_id:</b> <code>{n[0]}</code>\n<b>2. user_name:</b> @{n[5]}\n<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{n[6]}</code>\n<b>5. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> <code>{n[7]}</code>\n<b>6. id –∑–∞–∫–∞–∑–∞:</b> <code>{n[2]}</code>\n<b>7. id —Ç–æ–≤–∞—Ä–∞: <code>{n[1]}</code> </b>\n<b>8. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {n[9]}\n<b>9. –†–∞–∑–º–µ—Ä:</b> {n[3]}\n<b>10. –¶–µ–Ω–∞:</b> <code>{n[10]}</code> —Ä—É–±.\n<b>11. –ë–æ–Ω—É—Å—ã —é–∑–µ—Ä–∞:</b> <code>{n[12]}</code> —Ä—É–±.\n<b>12. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> <code>{int(n[10]) - int(n[12])}</code> —Ä—É–±.\n<b>13. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {n[8]}", parse_mode= 'html', reply_markup= order_inline_f)
            how += 1
    if how == 0:
        await callback.answer('üîé–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞', show_alert= True)

async def delivery_full(callback: types.CallbackQuery):
    i = cur.execute('SELECT * FROM order_basket').fetchall()
    how = 0
    for n in i:
        if n[4] == '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É':
            inl = InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–¢–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data=f"delivery_commit_in {n[2]}"))
            await callback.message.answer_photo(n[11],f"<b>1. user_id:</b> <code>{n[0]}</code>\n<b>2. user_name:</b> @{n[5]}\n<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{n[6]}</code>\n<b>5. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> <code>{n[7]}</code>\n<b>6. id –∑–∞–∫–∞–∑–∞:</b> <code>{n[2]}</code>\n<b>7. id —Ç–æ–≤–∞—Ä–∞: <code>{n[1]}</code> </b>\n<b>8. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {n[9]}\n<b>9. –†–∞–∑–º–µ—Ä:</b> {n[3]}\n<b>10. –¶–µ–Ω–∞:</b> <code>{n[10]}</code> —Ä—É–±.\n<b>11. –ë–æ–Ω—É—Å—ã —é–∑–µ—Ä–∞:</b> <code>{n[12]}</code> —Ä—É–±.\n<b>12. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> <code>{int(n[10]) - int(n[12])}</code> —Ä—É–±.\n<b>13. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {n[8]}", parse_mode= 'html', reply_markup= inl)
            how += 1
    if how == 0:
        await callback.answer('üîé–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞', show_alert= True)

async def completed_full(callback: types.CallbackQuery):
    i = cur.execute('SELECT * FROM order_basket').fetchall()
    how = 0
    for n in i:
        if n[4] == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
            inline = InlineKeyboardMarkup().add(InlineKeyboardButton('‚òëÔ∏è–ó–∞–≤–µ—Ä—à–µ–Ω–æ', callback_data='None'))
            await callback.message.answer_photo(n[11],f"<b>1. user_id:</b> <code>{n[0]}</code>\n<b>2. user_name:</b> @{n[5]}\n<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{n[6]}</code>\n<b>5. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> <code>{n[7]}</code>\n<b>6. id –∑–∞–∫–∞–∑–∞:</b> <code>{n[2]}</code>\n<b>7. id —Ç–æ–≤–∞—Ä–∞: <code>{n[1]}</code> </b>\n<b>8. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {n[9]}\n<b>9. –†–∞–∑–º–µ—Ä:</b> {n[3]}\n<b>10. –¶–µ–Ω–∞:</b> <code>{n[10]}</code> —Ä—É–±.\n<b>11. –ë–æ–Ω—É—Å—ã —é–∑–µ—Ä–∞:</b> <code>{n[12]}</code> —Ä—É–±.\n<b>12. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> <code>{int(n[10]) - int(n[12])}</code> —Ä—É–±.\n<b>13. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {n[8]}", parse_mode= 'html', reply_markup= inline)            
            how += 1
    if how == 0:
        await callback.answer('üîé–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞', show_alert= True)

async def cancellation_full(callback: types.CallbackQuery):
    i = cur.execute('SELECT * FROM order_basket').fetchall()
    how = 0
    for n in i:
        if n[4] == '–û—Ç–º–µ–Ω–µ–Ω–æ':
            inline = InlineKeyboardMarkup().add(InlineKeyboardButton('‚ùå–û—Ç–º–µ–Ω–µ–Ω–æ', callback_data='None'))
            await callback.message.answer_photo(n[11],f"<b>1. user_id:</b> <code>{n[0]}</code>\n<b>2. user_name:</b> @{n[5]}\n<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{n[6]}</code>\n<b>5. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b> <code>{n[7]}</code>\n<b>6. id –∑–∞–∫–∞–∑–∞:</b> <code>{n[2]}</code>\n<b>7. id —Ç–æ–≤–∞—Ä–∞: <code>{n[1]}</code> </b>\n<b>8. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {n[9]}\n<b>9. –†–∞–∑–º–µ—Ä:</b> {n[3]}\n<b>10. –¶–µ–Ω–∞:</b> <code>{n[10]}</code> —Ä—É–±.\n<b>11.–ë–æ–Ω—É—Å—ã —é–∑–µ—Ä–∞:</b> <code>{n[12]}</code> —Ä—É–±.\n<b>12.–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> <code>{int(n[10]) - int(n[12])}</code> —Ä—É–±.\n<b>11. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {n[8]}", parse_mode= 'html', reply_markup= inline)
            how += 1
    if how == 0:
        await callback.answer('üîé–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞', show_alert= True)

"""   –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í –ù–û–í–´–• –ó–ê–Ø–í–ö–ê–•   """
async def conf_user_admin(callback: types.CallbackQuery):
    inline = InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', callback_data= 'None'))
    i = cur.execute('SELECT * FROM order_basket WHERE id_order ==?', (int(callback.data.replace('pay_ok_admin ', '')),)).fetchone()
    cur.execute('UPDATE order_basket SET status ==? WHERE id_order ==?', ('–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É', int(callback.data.replace('pay_ok_admin ', ''))))
    base.commit()
    await callback.bot.send_message(i[0], f"<b>id –∑–∞–∫–∞–∑–∞:</b> <code>{i[2]}</code>\n<b>–û–ø–ª–∞—á–µ–Ω–æ</b>: <b>{i[10]}</b> —Ä—É–±.", reply_markup= inline, parse_mode= 'html')

async def cancel_user_admin(callback: types.CallbackQuery):
    inline = InlineKeyboardMarkup().add(InlineKeyboardButton('‚ùå–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', callback_data= 'None'))
    i = cur.execute('SELECT * FROM order_basket WHERE id_order ==?', (int(callback.data.replace('cancel_admin ', '')),)).fetchone()
    cur.execute('UPDATE order_basket SET status ==? WHERE id_order ==?', ('–û—Ç–º–µ–Ω–µ–Ω–æ', int(callback.data.replace('cancel_admin ', ''))))
    base.commit()
    await callback.bot.send_message(i[0], f"<b>id –∑–∞–∫–∞–∑–∞:</b> <code>{i[2]}</code>\n\n‚ùóÔ∏è<i>–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–ø–ª–∞—Ç—ã –∏ id –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞</i>", reply_markup= inline, parse_mode= 'html')

"""   –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í –ü–ï–†–ï–î–ê–ù–û –í –î–û–°–¢–ê–í–ö–£   """
async def delivery_commit(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('‚úÖ–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞', callback_data='None')))
    await callback.answer('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É', show_alert= True)
    # await callback.message.delete()
    i = cur.execute('SELECT * FROM order_basket WHERE id_order ==?', (int(callback.data.replace('delivery_commit_in ', '')),)).fetchone()
    cur.execute('UPDATE order_basket SET status ==? WHERE id_order ==?', ('–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', int(callback.data.replace('delivery_commit_in ', ''))))
    base.commit()
    await callback.bot.send_message(i[0], 'üöö–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω')

async def office_r(message: types.Message):    
    await message.answer('üì®–†–∞—Å—Å—ã–ª–∫–∞', reply_markup=br_f)

"""   –†–ê–°–°–´–õ–ö–ê –ù–ê –ë–û–¢–ê   """
class mail_bot(StatesGroup):
    message_mail = State()

async def maili_bot_f(callback: types.CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    await mail_bot.next()

async def mail_bot_answer(message: types.Message, state: FSMContext):
    await state.update_data(message_mail = message.text)
    data = await state.get_data()
    y = cur.execute('SELECT id FROM data').fetchall()
    try:   
        for i in y:
            await message.bot.send_message(i[0], f"{data['message_mail']}")
    except:
        pass
    await state.finish()

"""   –ü–†–û–ú–û–ö–û–î–´   """
async def office_pro(message: types.Message):   
    await message.answer('üéÅ–ü—Ä–æ–º–æ–∫–æ–¥', reply_markup=bpromo_f)

class promo_m(StatesGroup):
    promo_title = State()
    promo_price = State()

async def promo_admin_full(callback: types.CallbackQuery):
    await callback.message.answer('–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ‚úèÔ∏è')
    await promo_m.next()

async def promo_title(message: types.Message, state: FSMContext):
    await state.update_data(promo_title = message.text)
    await message.answer('üí∞ –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –±—É–¥–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥?')
    await promo_m.next()

async def promo_price(message: types.Message, state: FSMContext):
    await state.update_data(promo_price = message.text)
    try:
        int(message.text)
        data = await state.get_data()
        cur.execute('INSERT INTO promo VALUES (?, ?, ?)', (data['promo_title'], data['promo_price'], 'True'))
        base.commit()
        await message.answer(f"üíé–í—ã–ø—É—â–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ <code>{data['promo_title']}</code> –Ω–∞ —Å—É–º–º—É <b>{data['promo_price']} —Ä—É–±.</b>", parse_mode='html', reply_markup=bm_f)
        await state.finish()
    except ValueError:
        await message.answer('‚ùå–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

    
async def office_s(message: types.Message):
    user = cur.execute('SELECT rowid FROM data').fetchall()
    order = cur.execute('SELECT * FROM order_basket').fetchall()
    order_unpaid = 0
    order_delivered = 0
    order_completed = 0
    order_cancel = 0
    for i in order:
        if i[4] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã':
            order_unpaid += 1
        elif i[4] == '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É':
            order_delivered += 1
        elif i[4] == '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
            order_completed += 1
        elif i[4] == '–û—Ç–º–µ–Ω–µ–Ω–æ':
            order_cancel += 1
 
    await message.answer(f"üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> {user[-1][0]}\n\n<b>---–ó–∞–∫–∞–∑—ã---</b> \n<b>–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö:</b> {order_unpaid}\n<b>–î–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è:</b> {order_delivered}\n<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:</b> {order_completed}\n<b>–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö:</b> {order_cancel}", parse_mode= 'html')
    


"""   –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê   """
class add_product(StatesGroup):
    title = State()
    description = State()
    price = State()
    size = State()
    photo = State()
    floor = State()

async def add_product_1(callback: types.CallbackQuery):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ‚úèÔ∏è')
    await add_product.next()

async def title_add(message: types.Message, state: FSMContext):
    await state.update_data(title = message.text)
    await message.answer('üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ')
    await add_product.next()

async def description_add(message: types.Message, state: FSMContext):
    await state.update_data(description = message.text)
    await message.answer('üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
    await add_product.next()

async def price_add(message: types.Message, state: FSMContext):
    await state.update_data(price= message.text)
    try:
        int(message.text)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
        await add_product.next()
    except ValueError:
        await message.answer('‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

async def size_add(message: types.Message, state: FSMContext):
    await state.update_data(size = message.text)
    await message.answer('üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞')
    await add_product.next()

async def photo_add(message: types.Message, state: FSMContext):
    await state.update_data(photo= message.photo[0].file_id)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª', reply_markup= bkey_f)
    await add_product.next()

async def floor(message: types.Message, state: FSMContext):
    await state.update_data(floor = message.text)
    data = await state.get_data()
    s = cur.execute('SELECT * FROM products_id').fetchall()
    s_new = int(s[0][0]) + 1
    if data['floor'] == 'üë®üèª–ú—É–∂—Å–∫–æ–µ':
        cur.execute('INSERT INTO men_kross VALUES (?, ?, ?, ?, ?, ?)', (data['title'], data['description'], data['price'], data['size'], data['photo'], s_new))
        base.commit()
        await message.answer('C–æ—Ö—Ä–∞–Ω–∏–ª –≤ –º—É–∂—Å–∫–æ–µ', reply_markup= bm_f)
    elif data['floor'] == 'üë©üèª‚Äçü¶∞–ñ–µ–Ω—Å–∫–æ–µ':
        cur.execute('INSERT INTO girl_kross VALUES (?, ?, ?, ?, ?, ?)', (data['title'], data['description'], data['price'], data['size'], data['photo'], s_new))
        base.commit()
        await message.answer('C–æ—Ö—Ä–∞–Ω–∏–ª –≤ –∂–µ–Ω—Å–∫–æ–µ', reply_markup= bm_f)
    elif data['floor'] == 'üë¶üèª–î–µ—Ç—Å–∫–æ–µ':
        cur.execute('INSERT INTO baby_kross VALUES (?, ?, ?, ?, ?, ?)', (data['title'], data['description'], data['price'], data['size'], data['photo'], s_new))
        base.commit()
        await message.answer('C–æ—Ö—Ä–∞–Ω–∏–ª –≤ –¥–µ—Ç—Å–∫–æ–µ', reply_markup= bm_f)
    cur.execute('UPDATE products_id SET id ==?', (s_new,))
    base.commit()
    await state.finish()

"""   –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ó–ê–ö–ê–ó   """
async def edit_product_1(callback: types.CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup= bti_f)

async def edit_product_men_1(callback: types.CallbackQuery):
    for i in cur.execute('SELECT * FROM men_kross').fetchall():
        btr_1 = InlineKeyboardButton('üóë–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data=f"del {i[5]}")
        btr_f = InlineKeyboardMarkup()
        btr_f.add(btr_1)
        await callback.message.answer_photo(i[4], f"<b>{i[0]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[1]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[2]} —Ä—É–±.</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>–ú—É–∂—Å–∫–æ–µ</b>", parse_mode='html', reply_markup= btr_f)

async def edit_product_girl_1(callback: types.CallbackQuery):
    for i in cur.execute('SELECT * FROM girl_kross').fetchall():
        btr_1 = InlineKeyboardButton('üóë–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data=f"del_zh {i[5]}")
        btr_f = InlineKeyboardMarkup()
        btr_f.add(btr_1)
        await callback.message.answer_photo(i[4], f"<b>{i[0]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[1]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[2]} —Ä—É–±.</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>–ñ–µ–Ω—Å–∫–æ–µ</b>", parse_mode='html', reply_markup= btr_f)

async def edit_product_baby_1(callback: types.CallbackQuery):
    for i in cur.execute('SELECT * FROM baby_kross').fetchall():
        btr_1 = InlineKeyboardButton('üóë–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data=f"del_b {i[5]}")
        btr_f = InlineKeyboardMarkup()
        btr_f.add(btr_1)
        await callback.message.answer_photo(i[4], f"<b>{i[0]}</b>\n\nüìú–û–ø–∏—Å–∞–Ω–∏–µ: <b>{i[1]}</b>\nüí∞–¶–µ–Ω–∞: <b>{i[2]} —Ä—É–±.</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>–î–µ—Ç—Å–∫–æ–µ</b>", parse_mode='html', reply_markup= btr_f)


async def del_men_kross(callback: types.CallbackQuery):
    cur.execute('DELETE FROM men_kross WHERE id ==?', (int(callback.data.replace('del ', '')),))
    base.commit()
    await callback.message.delete()

async def del_girl_kross(callback: types.CallbackQuery):
    cur.execute('DELETE FROM girl_kross WHERE id ==?', (int(callback.data.replace('del_zh ', '')),))
    base.commit()
    await callback.message.delete()

async def del_baby_kross(callback: types.CallbackQuery):
    cur.execute('DELETE FROM baby_kross WHERE id ==?', (int(callback.data.replace('del_b ', '')),))
    base.commit()
    await callback.message.delete()

async def inline_none(callback: types.CallbackQuery):
    await callback.answer('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')

def register_handlers_admin(dp : Dispatcher):
    dp.register_message_handler(admin_panel, commands=['admin'])
    dp.register_message_handler(office_t, lambda message: 'üì¶–¢–æ–≤–∞—Ä—ã' in message.text)
    dp.register_message_handler(office_p, lambda message: 'üë•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' in message.text)
    dp.register_message_handler(office_z, lambda message: 'üõç–ó–∞–∫–∞–∑—ã' in message.text)
    dp.register_callback_query_handler(new_order_f, text = ['new_order'])
    dp.register_callback_query_handler(delivery_full, text = ['delivery'])
    dp.register_callback_query_handler(completed_full, text = ['completed_in'])
    dp.register_callback_query_handler(cancellation_full, text = ['cancellation'])
    dp.register_callback_query_handler(conf_user_admin, Text(startswith= 'pay_ok_admin '))
    dp.register_callback_query_handler(cancel_user_admin, Text(startswith= 'cancel_admin '))
    dp.register_callback_query_handler(delivery_commit, Text(startswith= 'delivery_commit_in '))
    dp.register_message_handler(office_r, lambda message: 'üì®–†–∞—Å—Å—ã–ª–∫–∞' in message.text)
    dp.register_callback_query_handler(maili_bot_f, text = ['mail_bot_inline'])
    dp.register_message_handler(mail_bot_answer, state= mail_bot.message_mail)
    dp.register_message_handler(office_pro, lambda message: 'üéÅ–ü—Ä–æ–º–æ–∫–æ–¥' in message.text)
    dp.register_callback_query_handler(promo_admin_full, text = ['promo_admin_inline'])
    dp.register_message_handler(promo_title, state= promo_m.promo_title)
    dp.register_message_handler(promo_price, state= promo_m.promo_price)
    dp.register_message_handler(office_s, lambda message: 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in message.text)
    dp.register_callback_query_handler(add_product_1, text = ['add_product'])
    dp.register_message_handler(title_add, state= add_product.title)
    dp.register_message_handler(description_add, state= add_product.description)
    dp.register_message_handler(price_add, state= add_product.price)
    dp.register_message_handler(size_add, state= add_product.size)
    dp.register_message_handler(photo_add, content_types=['photo'], state= add_product.photo)
    dp.register_message_handler(floor, state= add_product.floor)   
    dp.register_callback_query_handler(edit_product_1, text = ['edit_product'])
    dp.register_callback_query_handler(edit_product_men_1, text = ['edit_product_men'])
    dp.register_callback_query_handler(del_men_kross, Text(startswith='del '))
    dp.register_callback_query_handler(edit_product_girl_1, text = ['edit_product_girl'])
    dp.register_callback_query_handler(del_girl_kross, Text(startswith='del_zh '))
    dp.register_callback_query_handler(edit_product_baby_1, text = ['edit_product_baby'])
    dp.register_callback_query_handler(del_baby_kross, Text(startswith='del_b '))
    dp.register_callback_query_handler(inline_none, text = ['None'])